(function () { L.Control.CategorizedLayers = L.Control.Layers.extend({ options: { collapsed: !0, groupsCollapsed: !0, collapseActiveGroups: !1, position: "topright", autoZIndex: !0 }, initialize: function (a, b, c) { L.setOptions(this, c), this._layers = {}, this._overlays = {}, this._groups = { baseLayer: {}, overlay: {} }, this._lastZIndex = 0, this._handlingClick = !1; for (var d in a) { this._layers[d] = {}; for (var e in a[d]) a[d][e]._category = d, a[d][e]._name = e, a[d][e]._overlay = !1, a[d][e]._categoryType = "baseLayer", this._addLayer(a[d][e], d, !1) } for (var f in b) { this._overlays[f] = {}; for (var g in b[f]) b[f][g]._category = f, b[f][g]._name = g, b[f][g]._overlay = !0, b[f][g]._categoryType = "overlay", this._addLayer(b[f][g], f, !0) } }, _onLayerChange: function (a) { var b = a.layer._overlay ? this._overlays[a.layer._category] : this._layers[a.layer._category]; if (b) { var c = b[L.stamp(a.layer)]; if (c) { this._handlingClick || this._update(); var d = c._overlay ? "layeradd" === a.type ? "overlayadd" : "overlayremove" : "layeradd" === a.type ? "baselayerchange" : null; d && this._map.fire(d, a) } } }, addBaseLayer: function (a, b, c) { return a._category = b, a._name = c, a._overlay = !1, a._categoryType = "baseLayer", this._addLayer(a, b), this._update(), this }, addOverlay: function (a, b, c) { return a._category = b, a._name = c, a._overlay = !0, a._categoryType = "overlay", this._addLayer(a, b), this._update(), this }, removeLayer: function (a) { var b = L.stamp(a); return delete this._layers[b], this._update(), this }, _addLayer: function (a, b, c) { var d = L.stamp(a); a._overlay || c ? (this._overlays[a._category] || (this._overlays[a._category] = {}), this._overlays[a._category][d] = a) : (this._layers[a._category] || (this._layers[a._category] = {}), this._layers[a._category][d] = a), this.options.autoZIndex && a.setZIndex && (this._lastZIndex++, a.setZIndex(this._lastZIndex)) }, _update: function () { if (this._container) { this._baseLayersList.innerHTML = "", this._overlaysList.innerHTML = "", this._groups = { baseLayer: {}, overlay: {} }; var a, b = !1, c = !1; for (var d in this._layers) for (var e in this._layers[d]) a = this._layers[d][e], this._addItem(a), c = c || a._overlay, b = b || !a._overlay; for (var f in this._overlays) for (var g in this._overlays[f]) a = this._overlays[f][g], this._addItem(a), c = c || a._overlay, b = b || !a._overlay; this._separator.style.display = c && b ? "" : "none" } }, _addItem: function (a) { var b, c, d, e, f = "leaflet-control-layers"; if (!this._groups[a._categoryType][a._category]) { var g = L.DomUtil.create("div", f + "-group"), h = document.createElement("span"), i = this.options.groupsCollapsed ? h.innerHTML = " &#9658; " : h.innerHTML = " &#9660; "; h.innerHTML += a._category, h.className = "groupHeader", h.category = a._category, h.collapsed = i, L.DomEvent.on(h, "click", this._onLabelClick), g.appendChild(h); var j = document.createElement("span"); j.className = "groupLayers", i && (j.style.height = "0", j.style.display = "none"), g.appendChild(j); var k = a._overlay ? this._overlaysList : this._baseLayersList; k.appendChild(g), this._groups[a._categoryType][a._category] = j } e = this._groups[a._categoryType][a._category], b = document.createElement("label"), d = this._map.hasLayer(a), d && !this.options.collapseActiveGroups && (e.previousSibling.innerHTML = " &#9660; " + e.previousSibling.category, e.previousSibling.collapsed = !1, e.style.height = "100%", e.style.display = "block"), a._overlay ? (c = document.createElement("input"), c.type = "checkbox", c.className = "leaflet-control-layers-selector", c.defaultChecked = d) : c = this._createRadioElement("leaflet-base-layers", d), c.layerId = L.stamp(a), c.category = a._category, c.overlay = a._overlay, L.DomEvent.on(c, "click", this._onInputClick, this), b.appendChild(c); var l = document.createElement("span"); return l.innerHTML = " " + a._name, b.appendChild(l), e.appendChild(b), b }, _onLabelClick: function () { this.collapsed ? (this.collapsed = !1, this.innerHTML = " &#9660; " + this.category, this.nextElementSibling.style.height = "100%", this.nextElementSibling.style.display = "block") : (this.collapsed = !0, this.innerHTML = " &#9658; " + this.category, this.nextElementSibling.style.height = "0", this.nextElementSibling.style.display = "none") }, _onInputClick: function () { var a, b, c = this._form.getElementsByTagName("input"), d = c.length; for (this._handlingClick = !0, a = 0; d > a; a++) { b = c[a]; var e = b.overlay ? this._overlays[b.category][b.layerId] : this._layers[b.category][b.layerId]; b.checked && !this._map.hasLayer(e) ? this._map.addLayer(e) : !b.checked && this._map.hasLayer(e) && this._map.removeLayer(e) } this._handlingClick = !1 }, _initLayout: function () { var a = "leaflet-control-layers", b = this._container = L.DomUtil.create("div", a); b.setAttribute("aria-haspopup", !0), L.Browser.touch ? L.DomEvent.on(b, "click", L.DomEvent.stopPropagation) : L.DomEvent.disableClickPropagation(b).disableScrollPropagation(b); var c = this._form = L.DomUtil.create("form", a + "-list"); if (this.options.collapsed) { L.Browser.android || L.DomEvent.on(b, "mouseover", this._expand, this).on(b, "mouseout", this._collapse, this); var d = this._layersLink = L.DomUtil.create("a", a + "-toggle", b); d.href = "#", d.title = "Layers", L.Browser.touch ? L.DomEvent.on(d, "click", L.DomEvent.stop).on(d, "click", this._expand, this) : L.DomEvent.on(d, "focus", this._expand, this), L.DomEvent.on(c, "click", function () { setTimeout(L.bind(this._onInputClick, this), 0) }, this), this._map.on("click", this._collapse, this) } else this._expand(); this._baseLayersList = L.DomUtil.create("div", a + "-base", c), this._separator = L.DomUtil.create("div", a + "-sub-separator", c), this._overlaysList = L.DomUtil.create("div", a + "-overlays", c), b.appendChild(c) }, _expand: function () { L.DomUtil.addClass(this._container, "leaflet-control-layers-expanded") }, _collapse: function () { this._container.className = this._container.className.replace(" leaflet-control-layers-expanded", "") } }) }).call(this);